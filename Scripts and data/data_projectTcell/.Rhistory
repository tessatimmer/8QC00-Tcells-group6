theme(axis.title = element_text(face = "bold", size = 12),
axis.text.x =
element_text(angle = 45, hjust = 1, size =10, face= "bold"),
axis.text.y = element_text(size =10, face= "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("Transcription Factors")
targets_IRF2 <- regulons$target[regulons$tf == "MYC"]
volcano_nice(as.data.frame(ttop_KOvsWT[ttop_KOvsWT$ID %in% targets_IRF2,]),
FCIndex = 2, pValIndex = 5, IDIndex = 1,nlabels = 20, label = TRUE,
straight = FALSE)
tf_activities_CARNIVALinput<- tf_activities_stat %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "TF")
write_csv(tf_activities_CARNIVALinput, "../results_project/TFActivity_CARNIVALinput_iTregvsResting_memory.csv")
tf_activities_counts <-
dorothea::run_viper(Normalised_counts_matrix, regulons,
options =  list(minsize = 5, eset.filter = FALSE,
cores = 1, verbose = FALSE, method = c("scale")))
tf_activities_counts_filter <- tf_activities_counts %>%
as.data.frame() %>%
rownames_to_column(var = "GeneID") %>%
dplyr::filter(GeneID %in% tf_activities_stat_top25$GeneID) %>%
column_to_rownames(var = "GeneID") %>%
as.matrix()
tf_activities_vector <- as.vector(tf_activities_counts_filter)
paletteLength <- 100
myColor <-
colorRampPalette(c("darkblue", "whitesmoke","indianred"))(paletteLength)
dorotheaBreaks <- c(seq(min(tf_activities_vector), 0,
length.out=ceiling(paletteLength/2) + 1),
seq(max(tf_activities_vector)/paletteLength,
max(tf_activities_vector),
length.out=floor(paletteLength/2)))
dorothea_hmap <- pheatmap(tf_activities_counts_filter,
fontsize=14, fontsize_row = 8, fontsize_col = 8,
color=myColor, breaks = dorotheaBreaks,
main = "Dorothea ABC", angle_col = 45,
treeheight_col = 0,  border_color = NA)
sessionInfo()
knitr::opts_chunk$set(echo = TRUE)
library(progeny)
library(dorothea)
library(tibble)
library(tidyr)
library(dplyr)
library(ggplot2)
library(pheatmap)
library(readr)
## For the volcano plot (related to support functions)
library(ggrepel)
## We also load the support functions
source("support_functions.R")
## We read the normalised counts and the experimental design
Normalised_counts <- read_csv("../data_projectTcell/count_memory_df_vsn.csv")
Experimental_design <- read_csv("../support_project/targets_memory.csv")
## We read the results from the differential analysis.
ttop_KOvsWT <- read_csv("../results_project/ttop_IFNBvsResting_memory.csv")
Normalised_counts_matrix <- Normalised_counts %>%
dplyr::mutate_if(~ any(is.na(.x)),~ if_else(is.na(.x),0,.x)) %>%
tibble::column_to_rownames(var = "gene") %>%
as.matrix()
ttop_KOvsWT_matrix <- ttop_KOvsWT %>%
dplyr::select(ID, t) %>%
dplyr::filter(!is.na(t)) %>%
column_to_rownames(var = "ID") %>%
as.matrix()
## We load Dorothea Regulons
data(dorothea_hs, package = "dorothea")
regulons <- dorothea_hs %>%
dplyr::filter(confidence %in% c("A", "B","C"))
tf_activities_stat <- dorothea::run_viper(ttop_KOvsWT_matrix, regulons,
options =  list(minsize = 5, eset.filter = FALSE,
cores = 1, verbose = FALSE, nes = TRUE))
tf_activities_stat_top25 <- tf_activities_stat %>%
as.data.frame() %>%
rownames_to_column(var = "GeneID") %>%
dplyr::rename(NES = "t") %>%
dplyr::top_n(25, wt = abs(NES)) %>%
dplyr::arrange(NES) %>%
dplyr::mutate(GeneID = factor(GeneID))
ggplot(tf_activities_stat_top25,aes(x = reorder(GeneID, NES), y = NES)) +
geom_bar(aes(fill = NES), stat = "identity") +
scale_fill_gradient2(low = "darkblue", high = "indianred",
mid = "whitesmoke", midpoint = 0) +
theme_minimal() +
theme(axis.title = element_text(face = "bold", size = 12),
axis.text.x =
element_text(angle = 45, hjust = 1, size =10, face= "bold"),
axis.text.y = element_text(size =10, face= "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("Transcription Factors")
targets_IRF2 <- regulons$target[regulons$tf == "MYC"]
volcano_nice(as.data.frame(ttop_KOvsWT[ttop_KOvsWT$ID %in% targets_IRF2,]),
FCIndex = 2, pValIndex = 5, IDIndex = 1,nlabels = 20, label = TRUE,
straight = FALSE)
tf_activities_CARNIVALinput<- tf_activities_stat %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "TF")
write_csv(tf_activities_CARNIVALinput, "../results_project/TFActivity_CARNIVALinput_IFNBvsResting_memory.csv")
tf_activities_counts <-
dorothea::run_viper(Normalised_counts_matrix, regulons,
options =  list(minsize = 5, eset.filter = FALSE,
cores = 1, verbose = FALSE, method = c("scale")))
tf_activities_counts_filter <- tf_activities_counts %>%
as.data.frame() %>%
rownames_to_column(var = "GeneID") %>%
dplyr::filter(GeneID %in% tf_activities_stat_top25$GeneID) %>%
column_to_rownames(var = "GeneID") %>%
as.matrix()
tf_activities_vector <- as.vector(tf_activities_counts_filter)
paletteLength <- 100
myColor <-
colorRampPalette(c("darkblue", "whitesmoke","indianred"))(paletteLength)
dorotheaBreaks <- c(seq(min(tf_activities_vector), 0,
length.out=ceiling(paletteLength/2) + 1),
seq(max(tf_activities_vector)/paletteLength,
max(tf_activities_vector),
length.out=floor(paletteLength/2)))
dorothea_hmap <- pheatmap(tf_activities_counts_filter,
fontsize=14, fontsize_row = 8, fontsize_col = 8,
color=myColor, breaks = dorotheaBreaks,
main = "Dorothea ABC", angle_col = 45,
treeheight_col = 0,  border_color = NA)
sessionInfo()
? NULL
sif <- read_sif("../data_projectTcell/curated_network_CARNIVALinput.csv")
sif <- read.sif("../data_projectTcell/curated_network_CARNIVALinput.sif")
loadNetwork.sif
library(BioNet)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BioNet")
libary(BioNet)
library(BioNet)
sif <- loadNetwork.sif("../data_projectTcell/curated_network_CARNIVALinput.sif")
sif <- loadNetwork.sif(sif.file=file.path("../data_projectTcell/curated_network_CARNIVALinput.sif")
)
loadNetwork.sif(sif.file="../data_projectTcell/curated_network_CARNIVALinput.sif")
loadNetwork.sif(sif.file=file.path("curated_network_CARNIVALinput.sif")
)
lib <- file.path(.path.package("BioNet"), "extdata")
loadNetwork.sif(sif.file=file.path("../data_projectTcell", "curated_network_CARNIVALinput.sif"))
? loadNetwork.sif
sif <- loadNetwork.sif(sif.file="../data_projectTcell/curated_network_CARNIVALinput.sif")
setwd("~/GitHub/8QC00-Tcells/data_projectTcell")
sif <- loadNetwork.sif(sif.file="~/GitHub/data_projectTcell/curated_network_CARNIVALinput.sif")
library(CARNIVAL)
knitr::opts_chunk$set(echo = TRUE)
library(progeny)
library(dorothea)
library(CARNIVAL)
library(OmnipathR)
library(readr)
library(tibble)
library(tidyr)
library(dplyr)
library(visNetwork)
library(ggplot2)
library(pheatmap)
library(BioNet)
## For the volcano plot (related to support functions)
library(ggrepel)
## We also load the support functions
source("assignPROGENyScores.r")
source("generateTFList.r")
source("carnival_visNetwork.r")
## We read the normalised counts and the experimental design
tf_activities <- read_csv("../results_project/TFActivity_CARNIVALinput_Th1vsResting_memory.csv")
PathwayActivity <- read_csv("../results_project/PathwayActivity_CARNIVALinput_Th1vsResting_memory.csv")
omniR <- import_omnipath_interactions()
# signed and directed
omnipath_sd <- omniR %>% dplyr::filter(consensus_direction == 1 &
(consensus_stimulation == 1 |
consensus_inhibition == 1
))
# In onze data is alles al -1 of 1 dus deze stap hoeft niet
# changing 0/1 criteria in consensus_stimulation/inhibition to -1/1
omnipath_sd$consensus_stimulation[which( omnipath_sd$consensus_stimulation == 0)] = -1
omnipath_sd$consensus_inhibition[which( omnipath_sd$consensus_inhibition == 1)] = -1
omnipath_sd$consensus_inhibition[which( omnipath_sd$consensus_inhibition == 0)] = 1
# check consistency on consensus sign and select only those in a SIF format
sif <- omnipath_sd[,c('source_genesymbol', 'consensus_stimulation', 'consensus_inhibition', 'target_genesymbol')] %>%
dplyr::filter(consensus_stimulation==consensus_inhibition) %>%
unique.data.frame()
# sif <- loadNetwork.sif(sif.file="~/GitHub/data_projectTcell/curated_network_CARNIVALinput.sif")
sif$consensus_stimulation <- NULL
colnames(sif) <- c('source', 'interaction', 'target')
# remove complexes
sif$source <- gsub(":", "_", sif$source)
sif$target <- gsub(":", "_", sif$target)
#save SIF
write_tsv(sif, "../results_project/curated_network_CARNIVALinput.tsv")
# dorothea for CARNIVAL
tf_activities_carnival <- data.frame(tf_activities, stringsAsFactors = F)
rownames(tf_activities_carnival) <- tf_activities$TF
tf_activities_carnival$TF <- NULL
tfList = generateTFList(tf_activities_carnival, top=50, access_idx = 1)
# progeny for CARNIVAL
load(file = system.file("progenyMembers.RData",package="CARNIVAL"))
PathwayActivity_carnival <- data.frame(PathwayActivity, stringsAsFactors = F)
rownames(PathwayActivity_carnival) <- PathwayActivity_carnival$Pathway
PathwayActivity_carnival$Pathway <- NULL
progenylist = assignPROGENyScores(progeny = t(PathwayActivity_carnival),
progenyMembers = progenyMembers,
id = "gene",
access_idx = 1)
# get initial nodes
iniMTX = base::setdiff(sif$source, sif$target)
iniciators = base::data.frame(base::matrix(data = NaN, nrow = 1, ncol = length(iniMTX)), stringsAsFactors = F)
colnames(iniciators) = iniMTX
cplexOpt = defaultCplexCarnivalOptions()
cplexOpt$solverpath = "C:/Program Files/IBM/ILOG/CPLEX_Studio201/cplex/bin/x64_win64"
cplexOpt$outputFolder = "C:/Users/20191641/Documents/GitHub/8QC00-Tcells/results_project"
cplexOpt$dirName = "C:/Users/20191641/Documents/GitHub/8QC00-Tcells/results_project"
#cplexOpt$workdir =  "C:/Users/20191641/Documents/Github/8QC00-Tcells"
# run carnival
carnival_result = runCARNIVAL( inputObj= iniciators,
measObj = tfList$t,
netObj = sif,
#weightObj = progenylist$score,
solverPath = "C:/Program Files/IBM/ILOG/CPLEX_Studio201/cplex/bin/x64_win64",
solver = "cplex",
timelimit=600,
mipGAP=0,
poolrelGAP=0 )
knitr::opts_chunk$set(echo = TRUE)
library(progeny)
library(dorothea)
library(CARNIVAL)
library(OmnipathR)
library(readr)
library(tibble)
library(tidyr)
library(dplyr)
library(visNetwork)
library(ggplot2)
library(pheatmap)
## For the volcano plot (related to support functions)
library(ggrepel)
## We also load the support functions
source("assignPROGENyScores.r")
source("generateTFList.r")
source("carnival_visNetwork.r")
## We read the normalised counts and the experimental design
tf_activities <- read_csv("../results/TFActivity_CARNIVALinput.csv")
PathwayActivity <- read_csv("../results/PathwayActivity_CARNIVALinput.csv")
knitr::opts_chunk$set(echo = TRUE)
library(progeny)
library(dorothea)
library(CARNIVAL)
library(OmnipathR)
library(readr)
library(tibble)
library(tidyr)
library(dplyr)
library(visNetwork)
library(ggplot2)
library(pheatmap)
## For the volcano plot (related to support functions)
library(ggrepel)
## We also load the support functions
source("assignPROGENyScores.r")
source("generateTFList.r")
source("carnival_visNetwork.r")
## We read the normalised counts and the experimental design
tf_activities <- read_csv("../results/TFActivity_CARNIVALinput.csv")
PathwayActivity <- read_csv("../results/PathwayActivity_CARNIVALinput.csv")
omniR <- import_Omnipath_Interactions()
# signed and directed
omnipath_sd <- omniR %>% dplyr::filter(consensus_direction == 1 &
(consensus_stimulation == 1 |
consensus_inhibition == 1
))
# changing 0/1 criteria in consensus_stimulation/inhibition to -1/1
omnipath_sd$consensus_stimulation[which( omnipath_sd$consensus_stimulation == 0)] = -1
omnipath_sd$consensus_inhibition[which( omnipath_sd$consensus_inhibition == 1)] = -1
omnipath_sd$consensus_inhibition[which( omnipath_sd$consensus_inhibition == 0)] = 1
# check consistency on consensus sign and select only those in a SIF format
sif <- omnipath_sd[,c('source_genesymbol', 'consensus_stimulation', 'consensus_inhibition', 'target_genesymbol')] %>%
dplyr::filter(consensus_stimulation==consensus_inhibition) %>%
unique.data.frame()
sif$consensus_stimulation <- NULL
colnames(sif) <- c('source', 'interaction', 'target')
# remove complexes
sif$source <- gsub(":", "_", sif$source)
sif$target <- gsub(":", "_", sif$target)
#save SIF
write_tsv(sif, "../results/omnipath_carnival.tsv")
# dorothea for CARNIVAL
tf_activities_carnival <- data.frame(tf_activities, stringsAsFactors = F)
rownames(tf_activities_carnival) <- tf_activities$TF
tf_activities_carnival$TF <- NULL
tfList = generateTFList(tf_activities_carnival, top=50, access_idx = 1)
# progeny for CARNIVAL
load(file = system.file("progenyMembers.RData",package="CARNIVAL"))
PathwayActivity_carnival <- data.frame(PathwayActivity, stringsAsFactors = F)
rownames(PathwayActivity_carnival) <- PathwayActivity_carnival$Pathway
PathwayActivity_carnival$Pathway <- NULL
progenylist = assignPROGENyScores(progeny = t(PathwayActivity_carnival),
progenyMembers = progenyMembers,
id = "gene",
access_idx = 1)
# get initial nodes
iniMTX = base::setdiff(sif$source, sif$target)
iniciators = base::data.frame(base::matrix(data = NaN, nrow = 1, ncol = length(iniMTX)), stringsAsFactors = F)
colnames(iniciators) = iniMTX
cplexOpt = defaultCplexCarnivalOptions()
cplexOpt$solverpath = "C:/Program Files/IBM/ILOG/CPLEX_Studio_Community201/cplex/bin/x64_win64"
cplexOpt$outputFolder = "C:/Users/20191641/Documents/transcriptutorial/results"
cplexOpt$dirName = "C:/Users/20191641/Documents/transcriptutorial/results"
# run carnival
carnival_result = runCARNIVAL( inputObj= iniciators,
measObj = tfList$t,
netObj = sif,
#weightObj = progenylist$score,
solverPath = "C:/Program Files/IBM/ILOG/CPLEX_Studio_Community201/cplex/bin/x64_win64",
solver = "cplex",
timelimit=600,
mipGAP=0,
poolrelGAP=0 )
# signed and directed
omnipath_sd <- omniR %>% dplyr::filter(consensus_direction == 1 &
(consensus_stimulation == 1 |
consensus_inhibition == 1
))
omniR <- import_omnipath_interactions()
# signed and directed
omnipath_sd <- omniR %>% dplyr::filter(consensus_direction == 1 &
(consensus_stimulation == 1 |
consensus_inhibition == 1
))
# changing 0/1 criteria in consensus_stimulation/inhibition to -1/1
omnipath_sd$consensus_stimulation[which( omnipath_sd$consensus_stimulation == 0)] = -1
omnipath_sd$consensus_inhibition[which( omnipath_sd$consensus_inhibition == 1)] = -1
omnipath_sd$consensus_inhibition[which( omnipath_sd$consensus_inhibition == 0)] = 1
# check consistency on consensus sign and select only those in a SIF format
sif <- omnipath_sd[,c('source_genesymbol', 'consensus_stimulation', 'consensus_inhibition', 'target_genesymbol')] %>%
dplyr::filter(consensus_stimulation==consensus_inhibition) %>%
unique.data.frame()
sif$consensus_stimulation <- NULL
colnames(sif) <- c('source', 'interaction', 'target')
# remove complexes
sif$source <- gsub(":", "_", sif$source)
sif$target <- gsub(":", "_", sif$target)
#save SIF
write_tsv(sif, "../results/omnipath_carnival.tsv")
# dorothea for CARNIVAL
tf_activities_carnival <- data.frame(tf_activities, stringsAsFactors = F)
rownames(tf_activities_carnival) <- tf_activities$TF
tf_activities_carnival$TF <- NULL
tfList = generateTFList(tf_activities_carnival, top=50, access_idx = 1)
# progeny for CARNIVAL
load(file = system.file("progenyMembers.RData",package="CARNIVAL"))
PathwayActivity_carnival <- data.frame(PathwayActivity, stringsAsFactors = F)
rownames(PathwayActivity_carnival) <- PathwayActivity_carnival$Pathway
PathwayActivity_carnival$Pathway <- NULL
progenylist = assignPROGENyScores(progeny = t(PathwayActivity_carnival),
progenyMembers = progenyMembers,
id = "gene",
access_idx = 1)
# get initial nodes
iniMTX = base::setdiff(sif$source, sif$target)
iniciators = base::data.frame(base::matrix(data = NaN, nrow = 1, ncol = length(iniMTX)), stringsAsFactors = F)
colnames(iniciators) = iniMTX
cplexOpt = defaultCplexCarnivalOptions()
cplexOpt$solverpath = "C:/Program Files/IBM/ILOG/CPLEX_Studio_Community201/cplex/bin/x64_win64"
cplexOpt$outputFolder = "C:/Users/20191641/Documents/transcriptutorial/results"
cplexOpt$dirName = "C:/Users/20191641/Documents/transcriptutorial/results"
# run carnival
carnival_result = runCARNIVAL( inputObj= iniciators,
measObj = tfList$t,
netObj = sif,
#weightObj = progenylist$score,
solverPath = "C:/Program Files/IBM/ILOG/CPLEX_Studio_Community201/cplex/bin/x64_win64",
solver = "cplex",
timelimit=600,
mipGAP=0,
poolrelGAP=0 )
# get initial nodes
iniMTX = base::setdiff(sif$source, sif$target)
iniciators = base::data.frame(base::matrix(data = NaN, nrow = 1, ncol = length(iniMTX)), stringsAsFactors = F)
colnames(iniciators) = iniMTX
#cplexOpt = defaultCplexCarnivalOptions()
#cplexOpt$solverpath = "C:/Program Files/IBM/ILOG/CPLEX_Studio_Community201/cplex/bin/x64_win64"
#cplexOpt$outputFolder = "C:/transcriptutorial/results"
#cplexOpt$dirName = "C:/ranscriptutorial/results"
# run carnival
carnival_result = runCARNIVAL( inputObj= iniciators,
measObj = tfList$t,
netObj = sif,
#weightObj = progenylist$score,
solverPath = "C:/Program Files/IBM/ILOG/CPLEX_Studio_Community201/cplex/bin/x64_win64",
solver = "cplex",
timelimit=600,
mipGAP=0,
poolrelGAP=0 )
# get initial nodes
iniMTX = base::setdiff(sif$source, sif$target)
iniciators = base::data.frame(base::matrix(data = NaN, nrow = 1, ncol = length(iniMTX)), stringsAsFactors = F)
colnames(iniciators) = iniMTX
#cplexOpt = defaultCplexCarnivalOptions()
#cplexOpt$solverpath = "C:/Program Files/IBM/ILOG/CPLEX_Studio_Community201/cplex/bin/x64_win64"
#cplexOpt$outputFolder = "C:/transcriptutorial/results"
#cplexOpt$dirName = "C:/ranscriptutorial/results"
# run carnival
carnival_result = runCARNIVAL( inputObj= iniciators,
measObj = tfList$t,
netObj = sif,
#weightObj = progenylist$score,
solverPath = "C:/Program Files/IBM/ILOG/CPLEX_Studio201/cplex/bin/x64_win64",
solver = "cplex",
timelimit=600,
mipGAP=0,
poolrelGAP=0 )
# get initial nodes
iniMTX = base::setdiff(sif$source, sif$target)
iniciators = base::data.frame(base::matrix(data = NaN, nrow = 1, ncol = length(iniMTX)), stringsAsFactors = F)
colnames(iniciators) = iniMTX
cplexOpt = defaultCplexCarnivalOptions()
cplexOpt$solverpath = "C:/Program Files/IBM/ILOG/CPLEX_Studio201/cplex/bin/x64_win64"
cplexOpt$outputFolder = "../transcriptutorial/results"
cplexOpt$dirName = "../transcriptutorial/results"
# run carnival
carnival_result = runCARNIVAL( inputObj= iniciators,
measObj = tfList$t,
netObj = sif,
#weightObj = progenylist$score,
solverPath = "C:/Program Files/IBM/ILOG/CPLEX_Studio201/cplex/bin/x64_win64",
solver = "cplex",
timelimit=600,
mipGAP=0,
poolrelGAP=0 )
knitr::opts_chunk$set(echo = TRUE)
library(progeny)
library(dorothea)
library(CARNIVAL)
library(OmnipathR)
library(readr)
library(tibble)
library(tidyr)
library(dplyr)
library(visNetwork)
library(ggplot2)
library(pheatmap)
library(BioNet)
## For the volcano plot (related to support functions)
library(ggrepel)
## We also load the support functions
source("assignPROGENyScores.r")
source("generateTFList.r")
source("carnival_visNetwork.r")
## We read the normalised counts and the experimental design
tf_activities <- read_csv("../results/TFActivity_CARNIVALinput.csv")
PathwayActivity <- read_csv("../results/PathwayActivity_CARNIVALinput.csv")
omniR <- import_omnipath_interactions()
# signed and directed
omnipath_sd <- omniR %>% dplyr::filter(consensus_direction == 1 &
(consensus_stimulation == 1 |
consensus_inhibition == 1
))
# In onze data is alles al -1 of 1 dus deze stap hoeft niet
# changing 0/1 criteria in consensus_stimulation/inhibition to -1/1
omnipath_sd$consensus_stimulation[which( omnipath_sd$consensus_stimulation == 0)] = -1
omnipath_sd$consensus_inhibition[which( omnipath_sd$consensus_inhibition == 1)] = -1
omnipath_sd$consensus_inhibition[which( omnipath_sd$consensus_inhibition == 0)] = 1
# check consistency on consensus sign and select only those in a SIF format
sif <- omnipath_sd[,c('source_genesymbol', 'consensus_stimulation', 'consensus_inhibition', 'target_genesymbol')] %>%
dplyr::filter(consensus_stimulation==consensus_inhibition) %>%
unique.data.frame()
# sif <- loadNetwork.sif(sif.file="~/GitHub/data_projectTcell/curated_network_CARNIVALinput.sif")
sif$consensus_stimulation <- NULL
colnames(sif) <- c('source', 'interaction', 'target')
# remove complexes
sif$source <- gsub(":", "_", sif$source)
sif$target <- gsub(":", "_", sif$target)
#save SIF
write_tsv(sif, "../results/curated_network_CARNIVALinput.tsv")
# dorothea for CARNIVAL
tf_activities_carnival <- data.frame(tf_activities, stringsAsFactors = F)
rownames(tf_activities_carnival) <- tf_activities$TF
tf_activities_carnival$TF <- NULL
tfList = generateTFList(tf_activities_carnival, top=50, access_idx = 1)
# progeny for CARNIVAL
load(file = system.file("progenyMembers.RData",package="CARNIVAL"))
PathwayActivity_carnival <- data.frame(PathwayActivity, stringsAsFactors = F)
rownames(PathwayActivity_carnival) <- PathwayActivity_carnival$Pathway
PathwayActivity_carnival$Pathway <- NULL
progenylist = assignPROGENyScores(progeny = t(PathwayActivity_carnival),
progenyMembers = progenyMembers,
id = "gene",
access_idx = 1)
# get initial nodes
iniMTX = base::setdiff(sif$source, sif$target)
iniciators = base::data.frame(base::matrix(data = NaN, nrow = 1, ncol = length(iniMTX)), stringsAsFactors = F)
colnames(iniciators) = iniMTX
cplexOpt = defaultCplexCarnivalOptions()
cplexOpt$solverpath = "C:/Program Files/IBM/ILOG/CPLEX_Studio201/cplex/bin/x64_win64"
#cplexOpt$outputFolder = "C:/Users/20191641/Documents/GitHub/8QC00-Tcells/results"
#cplexOpt$dirName = "C:/Users/20191641/Documents/GitHub/8QC00-Tcells/results"
#cplexOpt$workdir =  "C:/Users/20191641/Documents/Github/8QC00-Tcells"
# run carnival
carnival_result = runCARNIVAL( inputObj= iniciators,
measObj = tfList$t,
netObj = sif,
#weightObj = progenylist$score,
solverPath = "C:/Program Files/IBM/ILOG/CPLEX_Studio201/cplex/bin/x64_win64",
solver = "cplex",
timelimit=600,
mipGAP=0,
poolrelGAP=0 )
